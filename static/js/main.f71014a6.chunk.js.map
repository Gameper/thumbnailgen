{"version":3,"sources":["components/ImageDrop.tsx","components/Upload.tsx","components/EditorCanvas.tsx","styles/material-ui-styles.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ImgDrop","changeFile","onDrop","useCallback","acceptedFiles","forEach","file","reader","FileReader","onabort","console","log","onerror","readAsDataURL","onload","dataUrl","result","useDropzone","getRootProps","getInputProps","style","width","height","Upload","handleChangeFile","downloadUrl","className","type","onChange","createColoredText","font","fullText","color","coloredText","a","async","from","indexOf","length","textCanvasHeight","textCanvasWidth","Jimp","rgbaToInt","transparentColor","textCanvas3","wi","measureText","slice","print","apply","params","EditorCanvas","fontPath","renderedText","renderedText2","imgSrc","editedImgSrc","useEffect","read","err","imgLoaded","shadowOffset","textCanvas","resize","loadFont","orangeColor","whiteColor","blackColor","separator","shadow","text2","text3","separator2","shadow2","text22","text32","secondOffset","firstOffset","textCanvasIndent","composite","compositBottomY","getHeight","getBase64Async","MIME_PNG","imgBase64","src","alt","useStyles","makeStyles","theme","root","display","backgroundColor","appBar","marginRight","drawer","flexShrink","drawerPaper","alignItems","toolbar","mixins","content","flexGrow","padding","spacing","textField","multilineColor","drawerButton","drawerWidth","App","useState","fileUrl","setfileUrl","editedFileUrl","setEditedfileUrl","newText","setNewText","newText2","setNewText2","setRenderedText","setRenderedText2","classes","url","event","URL","createObjectURL","target","files","TextField","value","id","inputProps","Button","onClick","variant","startIcon","href","download","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f71014a6.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\ninterface IProps {\n    changeFile: (file: string) => void;\n  }\n  \nconst ImgDrop: React.FC<IProps> = ({changeFile}) => {\n\n    const onDrop = useCallback((acceptedFiles) => {\n        acceptedFiles.forEach((file: File) => {\n        const reader = new FileReader()\n        reader.onabort = () => console.log(\"file reading has aborted\")\n        reader.onerror = () => console.log(\"file reading has failed\")\n        reader.readAsDataURL(file)\n        reader.onload = () => {\n            const dataUrl = reader.result\n            if (typeof dataUrl === \"string\") {\n            changeFile(dataUrl)\n            }\n        }\n        });\n    }, [])\n\n    const {getRootProps, getInputProps} = useDropzone({onDrop})\n\n    return (\n        <div {...getRootProps()}>\n        <input {...getInputProps()}/>\n        <div style={{width:\"1280px\", height: \"720px\"}}>\n            <p>파일을 올려주세요</p>\n        </div>\n        </div>\n    )\n}\n\nexport default ImgDrop;","import React, { useState, useEffect, useCallback } from \"react\";\ninterface IProps {\n  handleChangeFile: (event: React.ChangeEvent<HTMLInputElement>) => any;\n  downloadUrl: string;\n}\n\nconst Upload: React.FC<IProps> = ({ handleChangeFile, downloadUrl }) => {\n  return (\n    <div className=\"file-input\">\n      <input type=\"file\" onChange={handleChangeFile} />\n    </div>\n  );\n};\n\nexport default Upload;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport Jimp from \"jimp\";\n\ninterface IProps {\n  renderedText: string;\n  renderedText2: string;\n  imgSrc: string;\n  editedImgSrc: string;\n  fontPath: string;\n\n  changeFile: (url: string) => void;\n}\n\nconst createColoredText = async (font: any, fullText: string, color: string, coloredText: string) => {\n  let from = fullText.indexOf(coloredText);\n  let to = from + coloredText.length;\n\n  const textCanvasHeight = 140;\n  const textCanvasWidth = 1000;\n\n  let transparentColor: number = await (Jimp as any).rgbaToInt(100, 100, 0, 0.5);\n  let textCanvas3 = await new Jimp(textCanvasWidth, textCanvasHeight, transparentColor);\n\n  let wi = Jimp.measureText(font, fullText.slice(0, from));\n  // let he = Jimp.measureTextHeight(font, fullText.slice(0, from), wi);\n\n  return await textCanvas3.print(font, wi, 0, coloredText).color([ { apply: \"xor\", params: [ color ] } ]);\n};\nconst EditorCanvas: React.FC<IProps> = ({\n  fontPath,\n  renderedText,\n  renderedText2,\n  imgSrc,\n  changeFile,\n  editedImgSrc\n}) => {\n  useEffect(\n    () => {\n      Jimp.read(imgSrc, async (err, imgLoaded) => {\n        const fontHeight = 50;\n        const bottomX = 10;\n        const bottomY = 0;\n        const shadowOffset = 4;\n        // get text\n        console.log(`[TEXT FROM PROPS]${renderedText}`);\n\n        const textCanvasHeight = 500;\n        const textCanvasWidth = 1000;\n        let transparentColor: number = await (Jimp as any).rgbaToInt(100, 100, 0, 0.5);\n        let textCanvas = await new Jimp(textCanvasWidth, textCanvasHeight, transparentColor);\n        // img resize\n        await imgLoaded.resize(1280, 720);\n        // load font\n        // const fontPath = `${process.env.PUBLIC_URL}/nanum/nanum.fnt`;\n\n        let font = await Jimp.loadFont(fontPath);\n        // print text to the bottom line\n\n        let orangeColor = \"#ffd042\";\n        let whiteColor = \"#ffffff\";\n        let blackColor = \"#000000\";\n\n        // first line\n        let separator = renderedText.indexOf(\" \");\n        let shadow = await createColoredText(font, renderedText, blackColor, renderedText);\n        let text2 = await createColoredText(font, renderedText, whiteColor, renderedText.slice(0, separator));\n        let text3 = await createColoredText(font, renderedText, orangeColor, renderedText.slice(separator));\n\n        let separator2 = renderedText2.indexOf(\" \");\n        let shadow2 = await createColoredText(font, renderedText2, blackColor, renderedText2);\n        let text22 = await createColoredText(font, renderedText2, orangeColor, renderedText2.slice(0, separator2));\n        let text32 = await createColoredText(font, renderedText2, whiteColor, renderedText2.slice(separator2));\n\n        let secondOffset = textCanvasHeight - 100;\n        let firstOffset = textCanvasHeight - 200;\n        let textCanvasIndent = 5;\n        await textCanvas.composite(shadow, shadowOffset, shadowOffset + firstOffset);\n        await textCanvas.composite(text2, textCanvasIndent, firstOffset);\n        await textCanvas.composite(text3, textCanvasIndent, firstOffset);\n\n        await textCanvas.composite(shadow2, shadowOffset, shadowOffset + secondOffset);\n        await textCanvas.composite(text22, textCanvasIndent, secondOffset);\n        await textCanvas.composite(text32, textCanvasIndent, secondOffset);\n\n        // resize text\n        const compositBottomX = 10;\n        const compositBottomY = imgLoaded.getHeight() - textCanvasHeight - 10;\n        await imgLoaded.composite(textCanvas, compositBottomX, compositBottomY);\n\n        let imgBase64 = await imgLoaded.getBase64Async(Jimp.MIME_PNG);\n        changeFile(imgBase64);\n      });\n    },\n    [ imgSrc, renderedText, renderedText2, fontPath ]\n  );\n\n  return (\n    <div>\n      <img width=\"auto\" height=\"auto\" src={editedImgSrc} alt=\"editorImg\" />\n    </div>\n  );\n};\nconst invertHex = (hex: string) => {\n  hex = hex.slice(1);\n  let hexString = (Number(`0x1${hex}`) ^ 0xffffff).toString(16).substr(1).toUpperCase();\n  return `#${hexString}`;\n};\n\nexport default EditorCanvas;\n","import { makeStyles, createStyles } from '@material-ui/core/styles';\nconst drawerWidth = 180;\nconst drawerChildWidth = drawerWidth - 20;\n\n// Color Palettes: https://colorhunt.co/palette/2763\n// 222831 393e46 00adb5 eeeeee\nlet colorFromPalettes1 = '#222831'\nlet colorFromPalettes2 = '#393e46'\nlet colorFromPalettes3 = '#00adb5'\nlet colorFromPalettes4 = '#eeeeee'\n\n// @ts-ignore \nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n        backgroundColor: '#1b262c'\n    },\n    appBar: {\n        width: `calc(100% - ${drawerWidth}px)`,\n        marginRight: drawerWidth,\n        backgroundColor: '#1b262c'\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n        // alignContent: 'center',\n        // alignItems: 'center',\n        // direction: 'column',\n        // justify: 'center'\n    },\n    drawerPaper: {\n        width: drawerWidth,\n        backgroundColor: colorFromPalettes2,\n        color: colorFromPalettes4,\n        // alignContent: 'center',\n        alignItems: 'center',\n        // justify: 'center'\n    },\n    toolbar: theme.mixins.toolbar,\n    content: {\n        flexGrow: 1,\n        backgroundColor: colorFromPalettes1,\n        padding: theme.spacing(3),\n        height: 2000\n    },\n    textField: {\n        color: colorFromPalettes4,\n        multilineColor: {\n            color: 'red'\n        },\n    },\n    drawerButton: {\n        width: drawerChildWidth\n    }\n}));\n\nexport default useStyles;","import React, { useState, useEffect, useCallback } from \"react\";\n\n// import \"./App.css\";\nimport \"./scss/styles.scss\";\n\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Button from \"@material-ui/core/Button\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport CreateIcon from \"@material-ui/icons/Create\";\nimport ImgDrop from \"./components/ImageDrop\";\nimport Upload from \"./components/Upload\";\nimport EditorCanvas from \"./components/EditorCanvas\";\nimport useStyles from \"./styles/material-ui-styles\";\n\nconst defaultSource =\n  \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT5XlCdYS6OP0Q5RENKnhkXWDsgfzlvssygvZul1efZtA7v9AtjKA&s\";\nconst nanumFontPath = `./nanum-barun-gothic-100/nanum100bg.fnt`;\nconst spocaSansFontPath = `./spoca-han-sans/spocahansans.fnt`;\n\nconst App: React.FC = () => {\n  const [ fileUrl, setfileUrl ] = useState(\"\");\n  const [ editedFileUrl, setEditedfileUrl ] = useState(\"\");\n  const [ newText, setNewText ] = useState(\"밥 먹자\");\n  const [ newText2, setNewText2 ] = useState(\"맛있느냐\");\n  const [ renderedText, setRenderedText ] = useState(\"\");\n  const [ renderedText2, setRenderedText2 ] = useState(\"\");\n\n  const [ fontPath, setFontPath ] = useState(nanumFontPath);\n\n  const handleChangeFile: React.ChangeEventHandler<HTMLInputElement> = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const url = URL.createObjectURL((event as any).target.files[0]);\n    console.log(`URL : ${url}`);\n    setfileUrl(url);\n  };\n\n  const changeEditedFile = (url: string) => {\n    setEditedfileUrl(url);\n  };\n\n  const onClickGenerate = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    setRenderedText(newText);\n    setRenderedText2(newText2);\n    console.log(\"im clicked\");\n  };\n\n  const classes = useStyles();\n\n  return (\n    <div className=\"test\">\n      {/* <CssBaseline /> */}\n      {/* <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>Thumbnail Generator</Toolbar>\n      </AppBar> */}\n      <div className=\"header\">Thumbnail Generator</div>\n      <main className=\"main-container\">\n        {/* <div className={classes.toolbar} /> */}\n        {fileUrl ? (\n          <EditorCanvas\n            fontPath={fontPath}\n            renderedText={renderedText}\n            renderedText2={renderedText2}\n            imgSrc={fileUrl}\n            changeFile={changeEditedFile}\n            editedImgSrc={editedFileUrl}\n          />\n        ) : (\n          <ImgDrop changeFile={(file) => setfileUrl(file)} />\n        )}\n      </main>\n      <div className=\"sidemenu\">\n        <Upload handleChangeFile={handleChangeFile} downloadUrl={editedFileUrl} />\n\n        <div className=\"input-container\">\n          <TextField\n            value={newText}\n            onChange={(event) => setNewText(event.target.value)}\n            className=\"input-field\"\n            id=\"filled-required\"\n            inputProps={{ className: classes.textField }}\n          />\n          <br />\n          <br />\n          <TextField\n            value={newText2}\n            onChange={(event) => setNewText2(event.target.value)}\n            className=\"input-field\"\n            id=\"filled-required\"\n            inputProps={{ className: classes.textField }}\n          />\n        </div>\n\n        <Button\n          onClick={onClickGenerate}\n          variant=\"contained\"\n          color=\"primary\"\n          className=\"thumb-btn\"\n          startIcon={<CreateIcon />}\n        >\n          생성\n        </Button>\n        <br />\n        <br />\n        <Button\n          href={editedFileUrl}\n          download=\"thumbnail\"\n          variant=\"contained\"\n          color=\"secondary\"\n          className=\"thumb-btn\"\n          startIcon={<SaveIcon />}\n        >\n          저장\n        </Button>\n      </div>\n      <div className=\"footer\">2020 © gameper.io</div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}