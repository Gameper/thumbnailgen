{"version":3,"sources":["components/ImageDrop.tsx","components/Upload.tsx","components/EditorCanvas.tsx","styles/material-ui-styles.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ImgDrop","changeFile","onDrop","useCallback","acceptedFiles","forEach","file","reader","FileReader","onabort","console","log","onerror","readAsDataURL","onload","dataUrl","result","useDropzone","getRootProps","getInputProps","style","width","height","Upload","handleChangeFile","downloadUrl","type","onChange","createColoredText","font","fullText","color","coloredText","a","async","from","indexOf","length","textCanvasHeight","textCanvasWidth","Jimp","rgbaToInt","transparentColor","textCanvas3","wi","measureText","slice","print","apply","params","EditorCanvas","fontPath","renderedText","renderedText2","imgSrc","editedImgSrc","useEffect","read","err","imgLoaded","shadowOffset","textCanvas","resize","loadFont","orangeColor","whiteColor","blackColor","separator","shadow","text2","text3","separator2","shadow2","text22","text32","secondOffset","firstOffset","textCanvasIndent","composite","compositBottomY","getHeight","getBase64Async","MIME_PNG","imgBase64","src","alt","useStyles","makeStyles","theme","root","display","backgroundColor","appBar","marginRight","drawer","flexShrink","drawerPaper","alignItems","toolbar","mixins","content","flexGrow","padding","spacing","textField","multilineColor","drawerButton","drawerWidth","App","useState","fileUrl","setfileUrl","editedFileUrl","setEditedfileUrl","newText","setNewText","newText2","setNewText2","setRenderedText","setRenderedText2","classes","className","CssBaseline","AppBar","position","Toolbar","url","Drawer","variant","paper","anchor","event","URL","createObjectURL","target","files","Divider","TextField","value","id","inputProps","Button","onClick","startIcon","href","download","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1b1239ba.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\ninterface IProps {\n    changeFile: (file: string) => void;\n  }\n  \nconst ImgDrop: React.FC<IProps> = ({changeFile}) => {\n\n    const onDrop = useCallback((acceptedFiles) => {\n        acceptedFiles.forEach((file: File) => {\n        const reader = new FileReader()\n        reader.onabort = () => console.log(\"file reading has aborted\")\n        reader.onerror = () => console.log(\"file reading has failed\")\n        reader.readAsDataURL(file)\n        reader.onload = () => {\n            const dataUrl = reader.result\n            if (typeof dataUrl === \"string\") {\n            changeFile(dataUrl)\n            }\n        }\n        });\n    }, [])\n\n    const {getRootProps, getInputProps} = useDropzone({onDrop})\n\n    return (\n        <div {...getRootProps()}>\n        <input {...getInputProps()}/>\n        <div style={{width:\"1280px\", height: \"720px\"}}>\n            <p>파일을 올려주세요</p>\n        </div>\n        </div>\n    )\n}\n\nexport default ImgDrop;","import React, { useState, useEffect, useCallback } from 'react';\ninterface IProps {\n    handleChangeFile: (event: React.ChangeEvent<HTMLInputElement>) => (any);\n    downloadUrl: string;\n}\n\nconst Upload: React.FC<IProps> = ({ handleChangeFile, downloadUrl }) => {\n\n    return (\n        <div>\n            <input type=\"file\" onChange={handleChangeFile} />\n        </div>\n    )\n}\n\nexport default Upload;","import React, { useState, useEffect, useCallback } from 'react';\nimport Jimp from 'jimp';\n\ninterface IProps {\n    renderedText: string;\n    renderedText2: string;\n    imgSrc: string;\n    editedImgSrc: string;\n    fontPath: string;\n\n    changeFile: (url: string) => (void);\n}\n\nconst createColoredText = async (font: any, fullText: string, color: string, coloredText: string) => {\n    let from = fullText.indexOf(coloredText);\n    let to = from + coloredText.length;\n\n    const textCanvasHeight = 140;\n    const textCanvasWidth = 1000;\n\n    let transparentColor: number = await (Jimp as any).rgbaToInt(100, 100, 0, 0.5);\n    let textCanvas3 = await new Jimp(textCanvasWidth, textCanvasHeight, transparentColor);\n\n    let wi = Jimp.measureText(font, fullText.slice(0, from));\n    // let he = Jimp.measureTextHeight(font, fullText.slice(0, from), wi);\n\n    return (await textCanvas3.print(font, wi, 0, coloredText).color([{ apply: 'xor', params: [color] }]));\n}\nconst EditorCanvas: React.FC<IProps> = ({ fontPath, renderedText, renderedText2, imgSrc, changeFile, editedImgSrc }) => {\n\n    useEffect(() => {\n        Jimp.read(imgSrc, async (err, imgLoaded) => {\n\n            const fontHeight = 50;\n            const bottomX = 10\n            const bottomY = 0;\n            const shadowOffset = 4;\n            // get text\n            console.log(`[TEXT FROM PROPS]${renderedText}`)\n\n\n            const textCanvasHeight = 500;\n            const textCanvasWidth = 1000;\n            let transparentColor: number = await (Jimp as any).rgbaToInt(100, 100, 0, 0.5);\n            let textCanvas = await new Jimp(textCanvasWidth, textCanvasHeight, transparentColor);\n            // img resize\n            await imgLoaded.resize(1280, 720);\n            // load font\n            // const fontPath = `${process.env.PUBLIC_URL}/nanum/nanum.fnt`;\n\n            let font = await Jimp.loadFont(fontPath);\n            // print text to the bottom line\n\n            let orangeColor = '#ffd042'\n            let whiteColor = '#ffffff'\n            let blackColor = '#000000'\n\n            // first line\n            let separator = renderedText.indexOf(' ');\n            let shadow = await createColoredText(font, renderedText, blackColor, renderedText);\n            let text2 = await createColoredText(font, renderedText, whiteColor, renderedText.slice(0, separator));\n            let text3 = await createColoredText(font, renderedText, orangeColor, renderedText.slice(separator));\n\n\n            let separator2 = renderedText2.indexOf(' ');\n            let shadow2 = await createColoredText(font, renderedText2, blackColor, renderedText2);\n            let text22 = await createColoredText(font, renderedText2, orangeColor, renderedText2.slice(0, separator2));\n            let text32 = await createColoredText(font, renderedText2, whiteColor, renderedText2.slice(separator2));\n\n            let secondOffset = textCanvasHeight - 100;\n            let firstOffset = textCanvasHeight - 200;\n            let textCanvasIndent = 5\n            await textCanvas.composite(shadow, shadowOffset, shadowOffset + firstOffset);\n            await textCanvas.composite(text2, textCanvasIndent, firstOffset);\n            await textCanvas.composite(text3, textCanvasIndent, firstOffset);\n\n            await textCanvas.composite(shadow2, shadowOffset, shadowOffset + secondOffset);\n            await textCanvas.composite(text22, textCanvasIndent, secondOffset);\n            await textCanvas.composite(text32, textCanvasIndent, secondOffset);\n\n            // resize text\n            const compositBottomX = 10;\n            const compositBottomY = imgLoaded.getHeight() - textCanvasHeight - 10\n            await imgLoaded.composite(textCanvas, compositBottomX, compositBottomY);\n\n\n            let imgBase64 = await imgLoaded.getBase64Async(Jimp.MIME_PNG);\n            changeFile(imgBase64);\n        })\n\n    }, [imgSrc, renderedText, renderedText2, fontPath])\n\n    return (\n        <div>\n            <img width=\"1280px\" height=\"720px\" src={editedImgSrc} alt=\"editorImg\" />\n        </div>\n    )\n}\nconst invertHex = (hex: string) => {\n    hex = hex.slice(1);\n    let hexString = (Number(`0x1${hex}`) ^ 0xFFFFFF).toString(16).substr(1).toUpperCase();\n    return `#${hexString}`\n}\n\nexport default EditorCanvas;","import { makeStyles, createStyles } from '@material-ui/core/styles';\nconst drawerWidth = 180;\nconst drawerChildWidth = drawerWidth - 20;\n\n// Color Palettes: https://colorhunt.co/palette/2763\n// 222831 393e46 00adb5 eeeeee\nlet colorFromPalettes1 = '#222831'\nlet colorFromPalettes2 = '#393e46'\nlet colorFromPalettes3 = '#00adb5'\nlet colorFromPalettes4 = '#eeeeee'\n\n// @ts-ignore \nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n        backgroundColor: '#1b262c'\n    },\n    appBar: {\n        width: `calc(100% - ${drawerWidth}px)`,\n        marginRight: drawerWidth,\n        backgroundColor: '#1b262c'\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n        // alignContent: 'center',\n        // alignItems: 'center',\n        // direction: 'column',\n        // justify: 'center'\n    },\n    drawerPaper: {\n        width: drawerWidth,\n        backgroundColor: colorFromPalettes2,\n        color: colorFromPalettes4,\n        // alignContent: 'center',\n        alignItems: 'center',\n        // justify: 'center'\n    },\n    toolbar: theme.mixins.toolbar,\n    content: {\n        flexGrow: 1,\n        backgroundColor: colorFromPalettes1,\n        padding: theme.spacing(3),\n        height: 2000\n    },\n    textField: {\n        color: colorFromPalettes4,\n        multilineColor: {\n            color: 'red'\n        },\n    },\n    drawerButton: {\n        width: drawerChildWidth\n    }\n}));\n\nexport default useStyles;","import React, { useState, useEffect, useCallback } from 'react';\n\nimport './App.css';\n\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport SaveIcon from '@material-ui/icons/Save';\nimport CreateIcon from '@material-ui/icons/Create';\nimport ImgDrop from './components/ImageDrop';\nimport Upload from './components/Upload';\nimport EditorCanvas from './components/EditorCanvas';\nimport useStyles from './styles/material-ui-styles';\n\nconst defaultSource = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT5XlCdYS6OP0Q5RENKnhkXWDsgfzlvssygvZul1efZtA7v9AtjKA&s';\nconst nanumFontPath = `./nanum-barun-gothic-100/nanum100bg.fnt`;\nconst spocaSansFontPath = `./spoca-han-sans/spocahansans.fnt`;\n\n\nconst App: React.FC = () => {\n  const [fileUrl, setfileUrl] = useState('')\n  const [editedFileUrl, setEditedfileUrl] = useState('')\n  const [newText, setNewText] = useState('밥 먹자');\n  const [newText2, setNewText2] = useState('맛있느냐');\n  const [renderedText, setRenderedText] = useState('');\n  const [renderedText2, setRenderedText2] = useState('');\n\n  const [fontPath, setFontPath] = useState(nanumFontPath);\n\n  const handleChangeFile: React.ChangeEventHandler<HTMLInputElement> = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const url = URL.createObjectURL((event as any).target.files[0])\n    console.log(`URL : ${url}`);\n    setfileUrl(url)\n  }\n\n  const changeEditedFile = (url: string) => {\n    setEditedfileUrl(url);\n  }\n\n  const onClickGenerate = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    setRenderedText(newText);\n    setRenderedText2(newText2);\n    console.log(\"im clicked\");\n  }\n\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n        Thumbnail Generator\n        </Toolbar>\n      </AppBar>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n         { fileUrl ? <EditorCanvas fontPath={fontPath} renderedText={renderedText} renderedText2={renderedText2} imgSrc={fileUrl} changeFile={changeEditedFile} editedImgSrc={editedFileUrl} /> : <ImgDrop changeFile={(file) => setfileUrl(file)}/>}\n      </main>\n      <Drawer\n        className={classes.drawer}\n        variant=\"permanent\"\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n        anchor=\"right\"\n      >\n        <div className={classes.toolbar} />\n        <br></br>\n        <br></br>\n        <Upload handleChangeFile={handleChangeFile} downloadUrl={editedFileUrl} />\n        <br></br>\n        <br></br>\n        <br></br>\n        <br></br>\n        <br></br>\n        <br></br>\n        <br></br>\n        <br></br>\n        <br></br>\n        <br></br>\n        <Divider />\n        <TextField value={newText} onChange={(event) => setNewText(event.target.value)} className={classes.textField} id=\"filled-required\" inputProps={{className: classes.textField }} />\n        <TextField value={newText2} onChange={(event) => setNewText2(event.target.value)} className={classes.textField} id=\"filled-required\" inputProps={{className: classes.textField }} />\n    \n        <br></br>\n        <br></br><br></br>\n        <Button onClick={onClickGenerate} variant=\"contained\" color=\"primary\" className={classes.drawerButton} startIcon={<CreateIcon />}>\n        생성\n        </Button>\n        \n        <Divider />\n        <Divider />\n        <Button href={editedFileUrl} download=\"thumbnail\" variant=\"contained\" color=\"secondary\" startIcon={<SaveIcon />}>\n        저장\n        </Button>\n        \n        <Divider />\n      </Drawer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}